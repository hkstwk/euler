package nl.hkolvoort.euler;

import java.util.ArrayList;
import java.util.Iterator;

/**
 * @author harm
 * @date 31-May-2015
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 	
 * 	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 	
 * 	Let us list the factors of the first seven triangle numbers:
 * 	
 * 	 1: 1
 * 	 3: 1,3
 * 	 6: 1,2,3,6
 * 	10: 1,2,5,10
 * 	15: 1,3,5,15
 * 	21: 1,3,7,21
 * 	28: 1,2,4,7,14,28
 * 	We can see that 28 is the first triangle number to have over five divisors.
 * 	
 * 	What is the value of the first triangle number to have over five hundred divisors?
 *
 */
public class P012_TriangularNumber {
	
	class Triangle {
		private Integer ordinal;
		private Integer triangle;
		private ArrayList<Integer> divisors;
		private Integer numberOfDivisors;
		
		public Triangle(Integer ord, Integer tri){
			ordinal = ord;
			triangle = tri;
			divisors = PrimeHelper.findFactors2(triangle);
			setNumberofDivisors();
		}
		
		public Triangle(Integer ord){
			ordinal = ord;
			PrimeHelper.calculateTriangle(ordinal);
			divisors = PrimeHelper.findFactors2(triangle);
			setNumberofDivisors();
		}
		
		private void setNumberofDivisors(){
			if (divisors != null){
				numberOfDivisors = divisors.size();
			}
			else{
				numberOfDivisors = 0;
			}
		}

		public Integer getOrdinal() {
			return ordinal;
		}

		public void setOrdinal(Integer ordinal) {
			this.ordinal = ordinal;
		}

		public Integer getTriangle() {
			return triangle;
		}

		public void setTriangle(Integer triangle) {
			this.triangle = triangle;
		}

		public ArrayList<Integer> getDivisors() {
			return divisors;
		}

		public void setDivisors(ArrayList<Integer> divisors) {
			this.divisors = divisors;
		}

		public Integer getNumberOfDivisors() {
			return numberOfDivisors;
		}

		public void setNumberOfDivisors(Integer numberOfDivisors) {
			this.numberOfDivisors = numberOfDivisors;
		}
		
		public String toString(){
			String result;
			result = " Ordinal " + ordinal + " / Triangle sum = " + triangle + " / #divisors = " + numberOfDivisors;
			result += " / List of divisors " + divisors.toString();
			return result;
			
		}
		
	}
	
	private ArrayList<Triangle> triangles;
	private Triangle mostDivisorTriangle;
	
	public P012_TriangularNumber(){
		triangles = new ArrayList<Triangle>();
	}

	public void getTriangles(Integer numberOfDivisors){
		Integer triangle = 0;
		Integer i = 0;
		Integer divisorCount = 0;
		Triangle tempTriangle;
		
		while (divisorCount <= numberOfDivisors){
			triangle += i;
			tempTriangle = new Triangle(i,triangle);
			triangles.add(tempTriangle);
			if (tempTriangle.getNumberOfDivisors() > divisorCount){
				mostDivisorTriangle = tempTriangle;
				divisorCount = tempTriangle.getNumberOfDivisors();
				System.out.println(tempTriangle.toString());
			}
			i++;
		}
	}
	
	public Triangle getMostDivisorTriangle() {
		return mostDivisorTriangle;
	}

	public void setMostDivisorTriangle(Triangle mostDivisorTriangle) {
		this.mostDivisorTriangle = mostDivisorTriangle;
	}
	
	public static void main(String[] args) {
		P012_TriangularNumber p012 = new P012_TriangularNumber();
		p012.getTriangles(500);
		System.out.println("\nHighest count of divisors: " + p012.getMostDivisorTriangle().toString());
	}

}
